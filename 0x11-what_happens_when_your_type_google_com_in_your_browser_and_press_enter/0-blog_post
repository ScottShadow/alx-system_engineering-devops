LINK:
https://medium.com/@rudaseswascottmc/what-happens-when-you-type-https-www-google-com-and-press-enter-a0db41f7ec42

What Happens When You Type "https://www.google.com" and Press Enter?

It begins with a Domain Name System (DNS) request. When you type "https://www.google.com" into your browser, your computer first needs to translate that human-readable domain name into an IP address, which is the unique identifier of the server hosting the website. This process involves a hierarchical structure of DNS servers. Your local DNS resolver first checks its cache to see if it already knows the IP address associated with "www.google.com." If not, it sends a request to a series of DNS servers, starting with the root servers, then the top-level domain (TLD) servers, and finally the authoritative DNS server for google.com. Once the IP address is obtained, it's cached locally for future use, speeding up subsequent requests.
Example: Imagine DNS servers as librarians who diligently search through their catalogs to find the IP address corresponding to the domain name you've requested.
TCP/IP: Building a Connection
With the IP address, your browser establishes a Transmission Control Protocol (TCP) connection to the server via the Internet Protocol (IP). This connection uses a three-way handshake: SYN, SYN-ACK, and ACK. The SYN (synchronize) packet is delivered to the server to establish the connection. The server responds with SYN-ACK (synchronize-acknowledge), indicating that it is willing to create the connection. Finally, your computer sends an ACK (acknowledge) packet to the server to confirm the connection was established. This handshake ensures that data is delivered between the client (your browser) and the server in a reliable, ordered, and error-checked manner.
Example: Think of TCP/IP as a pair of walkie-talkies that ensure clear and orderly communication between the client (your device) and the server.
Firewall: Fortifying the Perimeter
When your TCP connection is established, it may pass through one or more firewalls, which serve as barriers between your computer and potentially harmful entities on the internet. Firewalls can be network-based, which sits between your computer and the internet, or host-based, which is installed directly on your device. They monitor incoming and outgoing traffic via predetermined security criteria, preventing suspicious or illegal connections while allowing genuine ones to get through.
Example: Think of firewalls as vigilant guards stationed along the internet highway, inspecting each passing car (data packet) to verify it complies with security regulations.
HTTPS/SSL: Securing the Transmission
Once the TCP connection is established, your browser establishes a secure Hypertext Transfer Protocol Secure (HTTPS) connection via Secure Sockets Layer (SSL) or Transport Layer Security (TLS) encryption protocols. This encryption ensures that the data sent between your browser and the server is secure and unchangeable. The SSL/TLS handshake consists of multiple processes, including key exchange, certificate validation, and negotiation of symmetric encryption keys. This encryption is critical, particularly when sending sensitive data such as passwords or credit card numbers.
Example: Consider HTTPS/SSL encryption to be an impenetrable cloak that protects your data while it travels across the internet, protecting its confidentiality and integrity.
Load Balancer: Distributing the Load
Behind the scenes, particularly for large-scale websites like Google, there may be multiple servers handling incoming requests. A load balancer sits between the client and the servers, distributing incoming traffic over multiple servers to ensure maximum performance, scalability, and fault tolerance. Load balancers use various algorithms to distribute the load, such as round-robin, least connections, or weighted distribution.
Example: Imagine load balancers as expert conductors controlling the flow of traffic, directing each request to the most suitable server with precision and balance.
Web Server and Application Server: Serving Content Statically and Dynamically
When a request reaches the right server, the web server handles static content like HTML, CSS, and pictures, whereas the application server handles dynamic content like database queries or user authentication. Web servers like Apache and Nginx concentrate in effectively serving static information, whereas application servers like Tomcat and Node.js runs server-side scripts, interacts with databases, and creates dynamic web pages on the fly.
Example: Imagine the web server as a master chef in a busy kitchen, patiently preparing and plating each dish (web page) before giving it to hungry diners (users).
Also Consider application servers to be stage artists who decipher scripts (code) and arrange sophisticated plays (dynamic content generation) to captivate their audience (users).
Database: Fetching and Storing Data
Many websites, particularly those with dynamic content or user-generated data, rely heavily on databases. The application server interacts with the database to retrieve and store data as it needs to. Databases store data in an organized manner, allowing for efficient storage, retrieval, and manipulation of information. Common database systems include MySQL and MongoDB.
Example: Consider databases to be large warehouses containing an enormous amount of information that is precisely arranged and easily accessible to meet the needs of the application.
To summarize, the process from typing "https://www.google.com" into your browser to seeing the webpage load is a symphony of interrelated technologies and protocols, each with a critical function in guaranteeing a smooth and safe user experience. Understanding this technique can help you appreciate the complexity of the modern web and navigate it more confidently.
